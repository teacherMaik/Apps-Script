function reserveSpaces()
{
  const calId = copy and paste the calendar ID from the calendar config';

  // By default when linking a sheet to a form the it is named "Form responses 1"
  const ssForm = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Respuestas de formulario 1');
  const ssFormData = ssForm.getDataRange().getValues();
  const formLastRow = ssForm.getLastRow() - 1;
  const emailPerson = ssFormData[formLastRow][1];

  // It is important to work with the correct dtata format; strings, dates, numbers...
  const buildingSpace = ssFormData[formLastRow][2].toString();

  // Format the date from the Google Form so we can create a Google Calendar event
  const day = Utilities.formatDate(ssFormData[formLastRow][3], "GMT-5", "MMMM dd, yyyy");

  // When Google Forms submits an hour question, we actualy have an entire date. We use substring to extract the hours only
  const start = ssFormData[formLastRow][4].toString().substring(16, 24);
  const end = ssFormData[formLastRow][5].toString().substring(16, 24);
  
  // Concatenate formatted Date and hours to create Calendar Event
  let newStartDate = new Date(day + " " + start);
  let newEndDate = new Date(day + " " + end);

  // Re-format the date so we can look at Calendar (using Id) to look for events of that day
  let dayToSearch = new Date(Utilities.formatDate(ssFormData[formLastRow][3], "GMT-5", "yyyy, M, dd"));
  let events = CalendarApp.getCalendarById(calId).getEventsForDay(dayToSearch);

  // We get all events in an object and need to iterate over these events.
  // Use a counter to track all events that do not ahve a conflict with solicited reservation.
  let i = 0;
  events.forEach((event) => {

    // Check to see if solicited event is the same space. If not, just continue
    if (buildingSpace != event.getTitle().toString())
    {
      i++;
    }

    // If it is the same space, we check more aspects
    else if (buildingSpace === event.getTitle().toString())
    {

      // Check if start time and end time are before start time of existing event
      if (newStartDate < event.getStartTime() && newEndDate <= event.getStartTime() && buildingSpace === event.getTitle().toString())
      {
        i++;
      }

      // Check if start time and end time are after end time of existing event
      else if (newStartDate >= event.getEndTime() && newEndDate > event.getEndTime())
      {
        i++;
      }
    }
  });

  // Check to see if counter equals the same number of events for day. If so, we can agend the event, invite teacher soliciting event and send info.
  if (i === events.length)
  {
    CalendarApp.getCalendarById(calId).createEvent(buildingSpace, newStartDate, newEndDate).addGuest(emailPerson);
    ssForm.getRange(formLastRow + 1, 7).setValue('SÃ­');
  }

  // If there is a conflict (hours) then we send email informing of conflict and that event was not agended.
  else
  {
    ssForm.getRange(formLastRow + 1, 7).setValue('No');
  }
}


